{"version":3,"file":"component---src-pages-index-tsx-eee1bd4c51ba9656927c.js","mappings":"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","sources":["webpack://site/./src/pages/index.tsx"],"sourcesContent":["import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { MetamaskActions, MetaMaskContext } from '../hooks';\nimport {\n  connectSnap,\n  getSnap,\n  // sendHello,\n  shouldDisplayReconnectButton,\n} from '../utils';\nimport {\n  ConnectButton,\n  InstallFlaskButton,\n  ReconnectButton,\n  SendHelloButton,\n  Card,\n} from '../components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  margin-top: 7.6rem;\n  margin-bottom: 7.6rem;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding-left: 2.4rem;\n    padding-right: 2.4rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    width: auto;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 2.4rem;\n  text-align: center;\n`;\n\nconst Span = styled.span`\n  color: ${(props) => props.theme.colors.primary.default};\n`;\n\nconst Subtitle = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes.large};\n  font-weight: 500;\n  margin-top: 0;\n  margin-bottom: 0;\n  ${({ theme }) => theme.mediaQueries.small} {\n    font-size: ${({ theme }) => theme.fontSizes.text};\n  }\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 64.8rem;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst Notice = styled.div`\n  background-color: ${({ theme }) => theme.colors.background.alternative};\n  border: 1px solid ${({ theme }) => theme.colors.border.default};\n  color: ${({ theme }) => theme.colors.text.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n\n  & > * {\n    margin: 0;\n  }\n  ${({ theme }) => theme.mediaQueries.small} {\n    margin-top: 1.2rem;\n    padding: 1.6rem;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.error.muted};\n  border: 1px solid ${({ theme }) => theme.colors.error.default};\n  color: ${({ theme }) => theme.colors.error.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-bottom: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding: 1.6rem;\n    margin-bottom: 1.2rem;\n    margin-top: 1.2rem;\n    max-width: 100%;\n  }\n`;\n\nconst Index = () => {\n  const [state, dispatch] = useContext(MetaMaskContext);\n\n  const handleConnectClick = async () => {\n    try {\n      await connectSnap();\n      const installedSnap = await getSnap();\n\n      dispatch({\n        type: MetamaskActions.SetInstalled,\n        payload: installedSnap,\n      });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: MetamaskActions.SetError, payload: e });\n    }\n  };\n\n  const handleSendHelloClick = async () => {\n    try {\n      // await sendHello();\n      const [from] = (await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })) as string[];\n\n      if (!from) {\n        throw new Error('No account selected');\n      }\n\n      await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [\n          {\n            from,\n            to: '0x0000000000000000000000000000000000000000',\n            value: '0x00',\n            data: '0x1',\n          },\n        ],\n      });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: MetamaskActions.SetError, payload: e });\n    }\n  };\n\n  return (\n    <Container>\n      <Heading>\n        Welcome to <Span>template-snap</Span>\n      </Heading>\n      <Subtitle>\n        Get started by editing <code>src/index.ts</code>\n      </Subtitle>\n      <CardContainer>\n        {state.error && (\n          <ErrorMessage>\n            <b>An error happened:</b> {state.error.message}\n          </ErrorMessage>\n        )}\n        {!state.isFlask && (\n          <Card\n            content={{\n              title: 'Install',\n              description:\n                'Snaps is pre-release software only available in MetaMask Flask, a canary distribution for developers with access to upcoming features.',\n              button: <InstallFlaskButton />,\n            }}\n            fullWidth\n          />\n        )}\n        {!state.installedSnap && (\n          <Card\n            content={{\n              title: 'Connect',\n              description:\n                'Get started by connecting to and installing the example snap.',\n              button: (\n                <ConnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.isFlask}\n                />\n              ),\n            }}\n            disabled={!state.isFlask}\n          />\n        )}\n        {shouldDisplayReconnectButton(state.installedSnap) && (\n          <Card\n            content={{\n              title: 'Reconnect',\n              description:\n                'While connected to a local running snap this button will always be displayed in order to update the snap if a change is made.',\n              button: (\n                <ReconnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.installedSnap}\n                />\n              ),\n            }}\n            disabled={!state.installedSnap}\n          />\n        )}\n        <Card\n          content={{\n            title: 'Send Hello message',\n            description:\n              'Display a custom message within a confirmation screen in MetaMask.',\n            button: (\n              <SendHelloButton\n                onClick={handleSendHelloClick}\n                disabled={!state.installedSnap}\n              />\n            ),\n          }}\n          disabled={!state.installedSnap}\n          fullWidth={\n            state.isFlask &&\n            Boolean(state.installedSnap) &&\n            !shouldDisplayReconnectButton(state.installedSnap)\n          }\n        />\n        <Notice>\n          <p>\n            Please note that the <b>snap.manifest.json</b> and{' '}\n            <b>package.json</b> must be located in the server root directory and\n            the bundle must be hosted at the location specified by the location\n            field.\n          </p>\n        </Notice>\n      </CardContainer>\n    </Container>\n  );\n};\n\nexport default Index;\n"],"names":["Container","styled","displayName","componentId","theme","mediaQueries","small","Heading","Span","props","colors","primary","default","Subtitle","fontSizes","large","text","CardContainer","Notice","background","alternative","border","radii","ErrorMessage","error","muted","useContext","MetaMaskContext","state","dispatch","handleConnectClick","_context","connectSnap","getSnap","installedSnap","type","MetamaskActions","payload","console","handleSendHelloClick","_context2","window","ethereum","request","method","_ref17","from","Error","params","to","value","data","_jsxs","children","_jsx","message","isFlask","Card","content","title","description","button","InstallFlaskButton","fullWidth","ConnectButton","onClick","disabled","shouldDisplayReconnectButton","ReconnectButton","SendHelloButton","Boolean"],"sourceRoot":""}